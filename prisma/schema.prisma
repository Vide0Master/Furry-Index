generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String    @id @unique @default(uuid())
    username    String    @unique
    visiblename String?
    password    String
    createdAt   DateTime  @default(now())
    avatarID    String?
    sessions    Session[]
    files       File[]
    posts       Post[]

    @@index([username, id])
}

model Session {
    token      String    @id @unique
    createdAt  DateTime  @default(now())
    expiresAt  DateTime?
    userid     String
    user       User      @relation(fields: [userid], references: [id], onDelete: Cascade)
    clientinfo Json

    @@index([token])
}

model File {
    fileid     String   @id @unique @default(uuid())
    file       String   @unique
    filetype   String
    fileparams Json?
    ownerid    String
    owner      User     @relation(fields: [ownerid], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt
    tags       Tag[]    @relation("File-Tags")
    post       Post[]   @relation("Post-Files")
    locked     Boolean  @default(false)

    @@index([fileid])
}

model Tag {
    name        String    @id @unique
    files       File[]    @relation("File-Tags")
    posts       Post[]    @relation("Post-Tags")
    description Json?
    groupname   String?
    group       TagGroup? @relation(fields: [groupname], references: [basename])
    icon        String?

    @@index([name])
}

model TagGroup {
    basename String  @id @unique
    name     Json
    color    String  @default("#ffffff")
    tags     Tag[]
    locked   Boolean @default(false)

    @@index([basename])
}

enum PostType {
    image
    imageGroup
    comic
    video
}

enum PostRating {
    safe
    questionable
    mature
}

model Post {
    id          String     @id @unique @default(uuid())
    type        PostType
    name        String
    tags        Tag[]      @relation("Post-Tags")
    files       File[]     @relation("Post-Files")
    description String
    ownerid     String
    owner       User       @relation(fields: [ownerid], references: [id])
    createdOn   DateTime   @default(now())
    updatedOn   DateTime   @default(now()) @updatedAt()
    rating      PostRating
    visible     Boolean    @default(false)

    @@index([id])
}
