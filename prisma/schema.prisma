generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String      @id @unique @default(uuid())
    username             String      @unique
    visiblename          String?
    password             String
    createdAt            DateTime    @default(now())
    avatarID             String?     @unique
    avatar               File?       @relation("User-Avatar", fields: [avatarID], references: [id])
    sessions             Session[]
    files                File[]      @relation("User-Files")
    posts                Post[]
    globalprofileparams  Json?
    privateprofileparams Json?
    scores               Score[]
    favourites           Favourite[]

    @@index([username, id])
}

model Session {
    token      String    @id @unique
    createdAt  DateTime  @default(now())
    expiresAt  DateTime?
    userid     String
    user       User      @relation(fields: [userid], references: [id], onDelete: Cascade)
    clientinfo Json

    @@index([token])
}

model File {
    id         String   @id @unique @default(uuid())
    file       String   @unique
    filetype   String
    fileparams Json?
    ownerid    String
    owner      User     @relation("User-Files", fields: [ownerid], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt
    tags       Tag[]    @relation("File-Tags")
    postid     String?
    post       Post?    @relation(fields: [postid], references: [id], onDelete: SetNull)
    locked     Boolean  @default(false)
    avatarfor  User?    @relation("User-Avatar")

    @@index([id])
}

model Tag {
    name        String    @id @unique
    files       File[]    @relation("File-Tags")
    posts       Post[]    @relation("Post-Tags")
    description Json?
    groupname   String?
    group       TagGroup? @relation(fields: [groupname], references: [basename])
    icon        String?

    @@index([name])
}

model TagGroup {
    basename String  @id @unique
    name     Json
    color    String  @default("#ffffff")
    tags     Tag[]
    locked   Boolean @default(false)
    priority Int     @default(0)

    @@index([basename])
}

enum PostType {
    image
    imageGroup
    comic
    video
}

enum PostRating {
    safe
    questionable
    mature
}

model Post {
    id          String      @id @unique @default(uuid())
    type        PostType
    name        String
    tags        Tag[]       @relation("Post-Tags")
    files       File[]
    description String
    ownerid     String
    owner       User        @relation(fields: [ownerid], references: [id])
    createdOn   DateTime    @default(now())
    updatedOn   DateTime    @default(now()) @updatedAt()
    rating      PostRating
    visible     Boolean     @default(false)
    score       Int         @default(0)
    scores      Score[]
    favourites  Favourite[]

    @@index([id])
}

enum ScoreType {
    up
    down
}

model Score {
    id     String    @id @unique @default(uuid())
    userid String
    user   User      @relation(fields: [userid], references: [id], onDelete: Cascade)
    postid String
    post   Post      @relation(fields: [postid], references: [id], onDelete: Cascade)
    type   ScoreType

    @@unique([userid, postid])
    @@index([userid, postid])
}

model Favourite {
    id     String @id @unique @default(uuid())
    userid String
    user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)
    postid String
    post   Post   @relation(fields: [postid], references: [id], onDelete: Cascade)

    @@unique([userid, postid])
    @@index([userid, postid])
}
